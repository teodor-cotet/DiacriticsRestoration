/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-01")
public class Word2VecService {

  public interface Iface {

    public void trainModel(java.lang.String path, int noEpochs, int layerSize) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> loadModel(java.lang.String path) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void trainModel(java.lang.String path, int noEpochs, int layerSize, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void loadModel(java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void trainModel(java.lang.String path, int noEpochs, int layerSize) throws org.apache.thrift.TException
    {
      send_trainModel(path, noEpochs, layerSize);
    }

    public void send_trainModel(java.lang.String path, int noEpochs, int layerSize) throws org.apache.thrift.TException
    {
      trainModel_args args = new trainModel_args();
      args.setPath(path);
      args.setNoEpochs(noEpochs);
      args.setLayerSize(layerSize);
      sendBaseOneway("trainModel", args);
    }

    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> loadModel(java.lang.String path) throws org.apache.thrift.TException
    {
      send_loadModel(path);
      return recv_loadModel();
    }

    public void send_loadModel(java.lang.String path) throws org.apache.thrift.TException
    {
      loadModel_args args = new loadModel_args();
      args.setPath(path);
      sendBase("loadModel", args);
    }

    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> recv_loadModel() throws org.apache.thrift.TException
    {
      loadModel_result result = new loadModel_result();
      receiveBase(result, "loadModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadModel failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void trainModel(java.lang.String path, int noEpochs, int layerSize, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      trainModel_call method_call = new trainModel_call(path, noEpochs, layerSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class trainModel_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String path;
      private int noEpochs;
      private int layerSize;
      public trainModel_call(java.lang.String path, int noEpochs, int layerSize, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.path = path;
        this.noEpochs = noEpochs;
        this.layerSize = layerSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("trainModel", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        trainModel_args args = new trainModel_args();
        args.setPath(path);
        args.setNoEpochs(noEpochs);
        args.setLayerSize(layerSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void loadModel(java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadModel_call method_call = new loadModel_call(path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadModel_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> {
      private java.lang.String path;
      public loadModel_call(java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadModel_args args = new loadModel_args();
        args.setPath(path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadModel();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("trainModel", new trainModel());
      processMap.put("loadModel", new loadModel());
      return processMap;
    }

    public static class trainModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, trainModel_args> {
      public trainModel() {
        super("trainModel");
      }

      public trainModel_args getEmptyArgsInstance() {
        return new trainModel_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, trainModel_args args) throws org.apache.thrift.TException {
        iface.trainModel(args.path, args.noEpochs, args.layerSize);
        return null;
      }
    }

    public static class loadModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadModel_args> {
      public loadModel() {
        super("loadModel");
      }

      public loadModel_args getEmptyArgsInstance() {
        return new loadModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadModel_result getResult(I iface, loadModel_args args) throws org.apache.thrift.TException {
        loadModel_result result = new loadModel_result();
        result.success = iface.loadModel(args.path);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("trainModel", new trainModel());
      processMap.put("loadModel", new loadModel());
      return processMap;
    }

    public static class trainModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, trainModel_args, Void> {
      public trainModel() {
        super("trainModel");
      }

      public trainModel_args getEmptyArgsInstance() {
        return new trainModel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, trainModel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.trainModel(args.path, args.noEpochs, args.layerSize,resultHandler);
      }
    }

    public static class loadModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadModel_args, java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> {
      public loadModel() {
        super("loadModel");
      }

      public loadModel_args getEmptyArgsInstance() {
        return new loadModel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.util.List<java.lang.Double>> o) {
            loadModel_result result = new loadModel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            loadModel_result result = new loadModel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadModel_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException {
        iface.loadModel(args.path,resultHandler);
      }
    }

  }

  public static class trainModel_args implements org.apache.thrift.TBase<trainModel_args, trainModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<trainModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("trainModel_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NO_EPOCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("noEpochs", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField LAYER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("layerSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new trainModel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new trainModel_argsTupleSchemeFactory();

    public java.lang.String path; // required
    public int noEpochs; // required
    public int layerSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path"),
      NO_EPOCHS((short)2, "noEpochs"),
      LAYER_SIZE((short)3, "layerSize");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          case 2: // NO_EPOCHS
            return NO_EPOCHS;
          case 3: // LAYER_SIZE
            return LAYER_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOEPOCHS_ISSET_ID = 0;
    private static final int __LAYERSIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NO_EPOCHS, new org.apache.thrift.meta_data.FieldMetaData("noEpochs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LAYER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("layerSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(trainModel_args.class, metaDataMap);
    }

    public trainModel_args() {
    }

    public trainModel_args(
      java.lang.String path,
      int noEpochs,
      int layerSize)
    {
      this();
      this.path = path;
      this.noEpochs = noEpochs;
      setNoEpochsIsSet(true);
      this.layerSize = layerSize;
      setLayerSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public trainModel_args(trainModel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPath()) {
        this.path = other.path;
      }
      this.noEpochs = other.noEpochs;
      this.layerSize = other.layerSize;
    }

    public trainModel_args deepCopy() {
      return new trainModel_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
      setNoEpochsIsSet(false);
      this.noEpochs = 0;
      setLayerSizeIsSet(false);
      this.layerSize = 0;
    }

    public java.lang.String getPath() {
      return this.path;
    }

    public trainModel_args setPath(java.lang.String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public int getNoEpochs() {
      return this.noEpochs;
    }

    public trainModel_args setNoEpochs(int noEpochs) {
      this.noEpochs = noEpochs;
      setNoEpochsIsSet(true);
      return this;
    }

    public void unsetNoEpochs() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOEPOCHS_ISSET_ID);
    }

    /** Returns true if field noEpochs is set (has been assigned a value) and false otherwise */
    public boolean isSetNoEpochs() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOEPOCHS_ISSET_ID);
    }

    public void setNoEpochsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOEPOCHS_ISSET_ID, value);
    }

    public int getLayerSize() {
      return this.layerSize;
    }

    public trainModel_args setLayerSize(int layerSize) {
      this.layerSize = layerSize;
      setLayerSizeIsSet(true);
      return this;
    }

    public void unsetLayerSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAYERSIZE_ISSET_ID);
    }

    /** Returns true if field layerSize is set (has been assigned a value) and false otherwise */
    public boolean isSetLayerSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAYERSIZE_ISSET_ID);
    }

    public void setLayerSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAYERSIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((java.lang.String)value);
        }
        break;

      case NO_EPOCHS:
        if (value == null) {
          unsetNoEpochs();
        } else {
          setNoEpochs((java.lang.Integer)value);
        }
        break;

      case LAYER_SIZE:
        if (value == null) {
          unsetLayerSize();
        } else {
          setLayerSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      case NO_EPOCHS:
        return getNoEpochs();

      case LAYER_SIZE:
        return getLayerSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      case NO_EPOCHS:
        return isSetNoEpochs();
      case LAYER_SIZE:
        return isSetLayerSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof trainModel_args)
        return this.equals((trainModel_args)that);
      return false;
    }

    public boolean equals(trainModel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_noEpochs = true;
      boolean that_present_noEpochs = true;
      if (this_present_noEpochs || that_present_noEpochs) {
        if (!(this_present_noEpochs && that_present_noEpochs))
          return false;
        if (this.noEpochs != that.noEpochs)
          return false;
      }

      boolean this_present_layerSize = true;
      boolean that_present_layerSize = true;
      if (this_present_layerSize || that_present_layerSize) {
        if (!(this_present_layerSize && that_present_layerSize))
          return false;
        if (this.layerSize != that.layerSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
      if (isSetPath())
        hashCode = hashCode * 8191 + path.hashCode();

      hashCode = hashCode * 8191 + noEpochs;

      hashCode = hashCode * 8191 + layerSize;

      return hashCode;
    }

    @Override
    public int compareTo(trainModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNoEpochs()).compareTo(other.isSetNoEpochs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoEpochs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noEpochs, other.noEpochs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLayerSize()).compareTo(other.isSetLayerSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLayerSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.layerSize, other.layerSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("trainModel_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noEpochs:");
      sb.append(this.noEpochs);
      first = false;
      if (!first) sb.append(", ");
      sb.append("layerSize:");
      sb.append(this.layerSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class trainModel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public trainModel_argsStandardScheme getScheme() {
        return new trainModel_argsStandardScheme();
      }
    }

    private static class trainModel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<trainModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, trainModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NO_EPOCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.noEpochs = iprot.readI32();
                struct.setNoEpochsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LAYER_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.layerSize = iprot.readI32();
                struct.setLayerSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, trainModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NO_EPOCHS_FIELD_DESC);
        oprot.writeI32(struct.noEpochs);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAYER_SIZE_FIELD_DESC);
        oprot.writeI32(struct.layerSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class trainModel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public trainModel_argsTupleScheme getScheme() {
        return new trainModel_argsTupleScheme();
      }
    }

    private static class trainModel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<trainModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, trainModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        if (struct.isSetNoEpochs()) {
          optionals.set(1);
        }
        if (struct.isSetLayerSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
        if (struct.isSetNoEpochs()) {
          oprot.writeI32(struct.noEpochs);
        }
        if (struct.isSetLayerSize()) {
          oprot.writeI32(struct.layerSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, trainModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.noEpochs = iprot.readI32();
          struct.setNoEpochsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.layerSize = iprot.readI32();
          struct.setLayerSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loadModel_args implements org.apache.thrift.TBase<loadModel_args, loadModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadModel_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loadModel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loadModel_argsTupleSchemeFactory();

    public java.lang.String path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadModel_args.class, metaDataMap);
    }

    public loadModel_args() {
    }

    public loadModel_args(
      java.lang.String path)
    {
      this();
      this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadModel_args(loadModel_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
    }

    public loadModel_args deepCopy() {
      return new loadModel_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
    }

    public java.lang.String getPath() {
      return this.path;
    }

    public loadModel_args setPath(java.lang.String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof loadModel_args)
        return this.equals((loadModel_args)that);
      return false;
    }

    public boolean equals(loadModel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
      if (isSetPath())
        hashCode = hashCode * 8191 + path.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loadModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loadModel_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadModel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loadModel_argsStandardScheme getScheme() {
        return new loadModel_argsStandardScheme();
      }
    }

    private static class loadModel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<loadModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadModel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loadModel_argsTupleScheme getScheme() {
        return new loadModel_argsTupleScheme();
      }
    }

    private static class loadModel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<loadModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loadModel_result implements org.apache.thrift.TBase<loadModel_result, loadModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loadModel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loadModel_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadModel_result.class, metaDataMap);
    }

    public loadModel_result() {
    }

    public loadModel_result(
      java.util.Map<java.lang.String,java.util.List<java.lang.Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadModel_result(loadModel_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.util.List<java.lang.Double>> __this__success = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Double>>(other.success.size());
        for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Double>> other_element : other.success.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          java.util.List<java.lang.Double> other_element_value = other_element.getValue();

          java.lang.String __this__success_copy_key = other_element_key;

          java.util.List<java.lang.Double> __this__success_copy_value = new java.util.ArrayList<java.lang.Double>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public loadModel_result deepCopy() {
      return new loadModel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.util.List<java.lang.Double> val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Double>>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> getSuccess() {
      return this.success;
    }

    public loadModel_result setSuccess(java.util.Map<java.lang.String,java.util.List<java.lang.Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.util.List<java.lang.Double>>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof loadModel_result)
        return this.equals((loadModel_result)that);
      return false;
    }

    public boolean equals(loadModel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loadModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loadModel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadModel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loadModel_resultStandardScheme getScheme() {
        return new loadModel_resultStandardScheme();
      }
    }

    private static class loadModel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<loadModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Double>>(2*_map0.size);
                  java.lang.String _key1;
                  java.util.List<java.lang.Double> _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                      _val2 = new java.util.ArrayList<java.lang.Double>(_list4.size);
                      double _elem5;
                      for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                      {
                        _elem5 = iprot.readDouble();
                        _val2.add(_elem5);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Double>> _iter7 : struct.success.entrySet())
            {
              oprot.writeString(_iter7.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter7.getValue().size()));
                for (double _iter8 : _iter7.getValue())
                {
                  oprot.writeDouble(_iter8);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadModel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loadModel_resultTupleScheme getScheme() {
        return new loadModel_resultTupleScheme();
      }
    }

    private static class loadModel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<loadModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Double>> _iter9 : struct.success.entrySet())
            {
              oprot.writeString(_iter9.getKey());
              {
                oprot.writeI32(_iter9.getValue().size());
                for (double _iter10 : _iter9.getValue())
                {
                  oprot.writeDouble(_iter10);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Double>>(2*_map11.size);
            java.lang.String _key12;
            java.util.List<java.lang.Double> _val13;
            for (int _i14 = 0; _i14 < _map11.size; ++_i14)
            {
              _key12 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val13 = new java.util.ArrayList<java.lang.Double>(_list15.size);
                double _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readDouble();
                  _val13.add(_elem16);
                }
              }
              struct.success.put(_key12, _val13);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
